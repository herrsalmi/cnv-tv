redcapProjectInfo()
options(redcap_api_url = "https://redcapdemo.vanderbilt.edu/api/")
rcon <- redcapConnection(token = "8547BADC937E46F9E96D3D632F50A36E")
options(redcap_api_url = "https://redcapdemo.vanderbilt.edu/api/")
rcon <- redcapConnection(token = "8547BADC937E46F9E96D3D632F50A36E")
myData <- exportRecords(rcon)
myData <- exportRecords(rcon)
View(myData)
myData$lab_id
library('data.table')
fread('maldi.csv')
data <- fread('maldi.csv')
View(data)
View(data)
rownames(data) <- data$V1
data$V1 <- NULL
View(data)
View(data)
m <- as.matrix(data)
View(m)
rownames(m) <- rownames(data)
View(m)
var(m[1,])
m[â˜º1,]
m[1,]
m[1,2]
m[1,seq(1,50)]
var(m[1,seq(1,50)])
View(m)
plot(m[1,seq(1,50)])
sd(m[1,seq(1,50)])
mean(m[1,seq(1,50)])
mean(m[1,seq(1,99)])
sd(m[1,seq(1,99)])
mean(m[8,seq(1,99)])
sd(m[8,seq(1,99)])
sd(m[8,seq(100,156)])
mean(m[8,seq(100,156)])
x <- rnorm(400, mean=50, sd=10)
hist(x)
mat <- matrix(nrow = 300, ncol = 156)
floor(runif(3, min=0, max=101))
floor(runif(1, min=0, max=101))
runif(1, min=0, max=101)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (500 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (1000 + i*(runif(1, min=0, max=80))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
for (i in 31:300) {
mat[i,] <- rnorm(156, mean = (800 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
}
View(mat)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (500 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (1200 + i*(runif(1, min=0, max=120))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
for (i in 31:300) {
mat[i,] <- rnorm(156, mean = (800 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
}
View(mat)
View(data)
sample(2000:20000, 3, replace=FALSE)
sample(2000:20000, 10, replace=FALSE)
rownames(mat) <- sample(2000:20000, 300, replace=FALSE)
View(mat)
li <- rownames(mat)[1:30]
sample(2000:20000, 300, replace=FALSE)li
li
t.test(mat[1,])
t.test(mat[20,])
t.test(mat[33,])
t.test(mat[1,seq(1,99)], mat[1,seq(100,156)])
t.test(mat[40,seq(1,99)], mat[40,seq(100,156)])
t.test(mat[25,seq(1,99)], mat[25,seq(100,156)])
t.test(mat[100,seq(1,99)], mat[100,seq(100,156)])
View(mat)
li
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100,156])$p.value})
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res
res1
View(mat)
res1[1]
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, res))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
print("TPR ");TPR
print("FPR ");FPR
}
roc.val(0.05)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, res))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
print("TPR ", TPR);
print("FPR ", FPR);
}
roc.val(0.05)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, res))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
TPR
FPR
}
roc.val(0.05)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, res))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
TPR
}
roc.val(0.05)
pval<-0.05
res <- res1[res1<pval]
tp <- length(intersect(li, res))
names(res)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, names(res)))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
cat("TPR : ", TPR)
cat("FPR : ", FPR)
}
roc.val(0.05)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, names(res)))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
cat("TPR : ", TPR)
cat('\n')
cat("FPR : ", FPR)
}
roc.val(0.05)
roc.val(0.01)
roc.val(0.1)
roc.val(0.2)
roc.val(0.3)
roc.val(0.4)
roc.val(0.5)
roc.val(0.9)
roc.val(1)
roc.val(0.01)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (500 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (1000 + i*(runif(1, min=0, max=120))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
roc.val(0.01)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (500 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (900 + i*(runif(1, min=0, max=120))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
roc.val(0.01)
roc.val(0.05)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (600 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (900 + i*(runif(1, min=0, max=120))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
roc.val(0.05)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (600 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (900 + i*(runif(1, min=0, max=100))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
roc.val(0.05)
roc.val(0.1)
for (i in 1:30) {
mat[i,seq(1,99)] <- rnorm(99, mean = (700 + i*(runif(1, min=0, max=101))),
sd = (150+i*(runif(1, min=0, max=10))) )
mat[i,seq(100,156)] <- rnorm(57, mean = (900 + i*(runif(1, min=0, max=100))),
sd = (180+i*(runif(1, min=0, max=10))) )
}
roc.val(0.1)
roc.val(0.05)
roc.val(0.1)
roc.val(0.005)
roc.val <- function(pval){
res1 <- apply(mat, 1, function(x){t.test(x[1:99], x[100:156])$p.value})
res <- res1[res1<pval]
tp <- length(intersect(li, names(res)))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
list('TPR' = TPR, 'FPR' = FPR)
}
roc.val(0.005)
x <- vector(mode = 'numeric')
y <- vector(mode = 'numeric')
for (i in seq(0.005, 1, by = 0.005)) {
var <- roc.val(i)
x <- c(x, var$FPR)
y <- c(y, var$TPR)
}
plot(x, y, type = 'l', xlim = c(0,1), ylim=c(0,1))
y <- vector(0, mode = 'numeric')
x <- c(x, 0)
y <- c(y, 0)
x <- vector(mode = 'numeric')
y <- vector(mode = 'numeric')
x <- c(x, 0)
y <- c(y, 0)
for (i in seq(0.005, 1, by = 0.005)) {
var <- roc.val(i)
x <- c(x, var$FPR)
y <- c(y, var$TPR)
}
plot(x, y, type = 'l', color = 'red', xlim = c(0,1), ylim=c(0,1))
plot(x, y, type = 'l', col = 'red', xlim = c(0,1), ylim=c(0,1))
library("stats")
classes <- fread("classes.txt")
View(classes)
classes <- fread("classes.txt", header = F)
classes <-as.factor(classes$V1)
classes
res1 = aov(mat~classes)
matrix <-t(mat)
res1 = aov(matrix~classes)
tailla <- length(summary(res1))
nodata <- data.frame("M/Z"= numeric(0), "p.value"= numeric(0))
col <- colnames(matrix)
for(i in 1:tailla)
{
p.value <-summary(res1)[[i]][["Pr(>F)"]]
pvalue <- p.value[1]
nodata[i,2] <- pvalue
nodata[i,1] <- col[i]
}
View(nodata)
View(nodata)
nodata[1]
nodata[1,]
names(nodata[1,])
res <- nodata[nodata$p.value<pval,]
roc.val.anova <- function(pval){
matrix <-t(mat)
res1 = aov(matrix~classes)
tailla <- length(summary(res1))
nodata <- data.frame("M/Z"= numeric(0), "p.value"= numeric(0))
col <- colnames(matrix)
for(i in 1:tailla)
{
p.value <-summary(res1)[[i]][["Pr(>F)"]]
pvalue <- p.value[1]
nodata[i,2] <- pvalue
nodata[i,1] <- col[i]
}
res <- nodata[nodata$p.value<pval,]
tp <- length(intersect(li, res$M.Z))
fn <- 30 - tp
fp <- length(res) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
list('TPR' = TPR, 'FPR' = FPR)
}
roc.val.anova(0.05)
tp <- length(intersect(li, res$M.Z))
tp
fn <- 30 - tp
fn
length(res)
fp <- length(res$p.value) - tp
fp
roc.val.anova <- function(pval){
matrix <-t(mat)
res1 = aov(matrix~classes)
tailla <- length(summary(res1))
nodata <- data.frame("M/Z"= numeric(0), "p.value"= numeric(0))
col <- colnames(matrix)
for(i in 1:tailla)
{
p.value <-summary(res1)[[i]][["Pr(>F)"]]
pvalue <- p.value[1]
nodata[i,2] <- pvalue
nodata[i,1] <- col[i]
}
res <- nodata[nodata$p.value<pval,]
tp <- length(intersect(li, res$M.Z))
fn <- 30 - tp
fp <- length(res$p.value) - tp
tn <- 300 - (fn+fp+tp)
TPR <- (tp)/(tp+fn)
FPR <- (fp)/(fp+tn)
list('TPR' = TPR, 'FPR' = FPR)
}
roc.val.anova(0.05)
x <- vector(mode = 'numeric')
y <- vector(mode = 'numeric')
x <- c(x, 0)
y <- c(y, 0)
for (i in seq(0.005, 1, by = 0.005)) {
var <- roc.val.anova(i)
x <- c(x, var$FPR)
y <- c(y, var$TPR)
}
install.packages("cn.mops")
library(BiocInstaller)
biocLite("cn.mops")
library(cn.mops)
bamFile <- list.files(~"")
bamFile <- list.files("~/", pattern = ".bam$")
bamFile
bamData <- getReadCountsFromBAM(bamFile)
bamData <- getReadCountsFromBAM(bamFile, mode = "paired")
res <- cn.mops(bamData)
BAMFiles <- list.files(system.file("extdata", package="cn.mops"),pattern=".bam$",full.names=TRUE)
bamDataRanges <- getReadCountsFromBAM(BAMFiles,sampleNames=paste("Sample",1:3),mode="unpaired")
res <- cn.mops(bamDataRanges)
res
(bamDataRanges)
biocLite()
library(cnv)
install.packages(cnv)
install.packages("cnv")
install.packages(pkgs="cnv-seq.tar.gz", repo=NULL)
install.packages("glmnet")
library(glmnet)
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit <- glmnet(x, y)
print(fit)
coef(fit1,s=0.01) # extract coefficients at a single value of lambda
predict(fit1,newx=x[1:10,],s=c(0.01,0.005)) # make predictions
coef(fit,s=0.01)
predict(fit,newx=x[1:10,],s=c(0.01,0.005))
plot(fit)
plot(x, y)
x
y
install.packages("lars")
library(lars)
data(diabetes)
data(diabetes)
par(mfrow=c(2,2))
attach(diabetes)
attach(diabetes)
par(mfrow=c(2,2))
attach(diabetes)
data(diabetes)
par(mfrow=c(2,2))
attach(diabetes)
View(diabetes)
object <- lars(x,y)
plot(object)
attach(diabetes)
plot(diabetes)
View(diabetes)
object
object$meanx
install.packages("genlasso")
library(genlasso)
set.seed(1)
n<- 100
i <- 1:n
y = (i > 20 & i < 30) + 5*(i > 50 & i < 70) + rnorm(n, sd=0.1)
y
out = fusedlasso1d(y)
plot(out, lambda = 1)
plot(out, lambda = 2)
plot(out, lambda = 10)
plot(out, lambda = 0.5)
plot(out, lambda = 1)
plot(out, lambda = 1)
out
out$lambda
out$fit
out$u
out$beta
View(out$beta)
y
rnorm(100, 30, 5)
y <- rnorm(100, 30, 5)
out = fusedlasso1d(y)
plot(out, lambda = 1)
plot(out, lambda = 5)
plot(out, lambda = 0.3)
View(out$beta)
out$bls
y
out$y
out$completepath
out$df
out$lambda
out$u
View(out$u)
out$lambda
install.packages("dtw")
install.packages("dtw")
install.packages("dtw")
log(2)
log2(2)
log2(1)
log2(1.5)
library(genlasso)
library(genlasso)
set.seed(0)
n = 50
beta0 = rep(sample(1:10,5),each=n/5)
y = beta0 + rnorm(n,sd=0.8)
a = fusedlasso1d(y)
plot(a)
cv = cv.trendfilter(a)
plotplogis())
plot(cv)
plot(a,lambda=cv$lambda.min,main="Minimal CV error")
plot(a,lambda=cv$lambda.1se,main="One standard error rule")
cv$lambda
plot(a,lambda=cv$lambda.1se,main="One standard error rule")
plot(a,lambda=cv$lambda.min,main="Minimal CV error")
plot(a,lambda=cv$lambda.1se,main="One standard error rule")
d <- data.frame("a" = c(1,2,0,3), "b" = c(12,15,16,17))
d
d[1]
d[1,]
d[which(d[,1] != 0),]
x <- c(1.30, 1.31, 1.11, 1.08, 1.09, 1.13, 1.65,
1.26, 1.26, 1.18)
mean(x)
var(x)
x <- c(7.5, 4.48, 8.60, 7.73, 5.28, 4.25, 6.99,
6.31, 9.15, 5.06)
y <- c(28.66, 20.37, 22.33, 26.35, 22.29, 21.74,
23.11, 23.13, 24.68, 21.89)
plot(x, y)
cor(x, y, method = "pearson")
cov(x, y, method = "pearson")
mean(1:10)
mean(7:20)
n1 <- c(9, 9, 5, 5, 5, 6, 16, 8, 8, 7)
n2 <- c(13, 11, 14, 13, 12, 11)
t.test(n1 ,n2)
var(n1)
var(n2)
t.test(n1 ,n2, var.equal = TRUE)
n1 <- c(9, 9, 5, 5, 5, 6, 16, 8, 8, 7)
n2 <- c(13, 11, 14, 13, 12, 11)
t.test(n1 ,n2, var.equal = T)
Rcpp::sourceCpp('GitHub/cnv-tv/gc.content.cpp')
library(GenomicAlignments)
param <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isDuplicate=FALSE),
what=c("rname", "pos", "cigar"))
bam <- scanBam("Data/rocker.chr10.bam", param=param)[[1]]
irl <- extractAlignmentRangesOnReference(bam$cigar, pos=bam$pos,
f=bam$rname)
irl <- irl[elementLengths(irl) != 0] # drop empty elements
cvg <- coverage(irl)
setwd("~/GitHub/cnv-tv")
param <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,
isDuplicate=FALSE),
what=c("rname", "pos", "cigar"))
bam <- scanBam("Data/rocker.chr10.bam", param=param)[[1]]
irl <- extractAlignmentRangesOnReference(bam$cigar, pos=bam$pos,
f=bam$rname)
irl <- irl[elementLengths(irl) != 0] # drop empty elements
cvg <- coverage(irl)
ref <- readDNAStringSet("Data/umd.chr10.fa")
lowess.gc <- function(jtkx, jtky) {
jtklow <- lowess(jtkx, log(jtky), f=0.05)
jtkz <- approx(jtklow$x, jtklow$y, jtkx)
return(exp(log(jtky) - jtkz$y))
}
a <- cvg + 1  # to avoid log(0) when we apply log transformation
a <- a / mean(a)
gc.content <- gcContent(as.character(ref[[1]]), 100)
lowratio <- lowess.gc(gc.content, a)
